name: 'Build Application'
description: 'Build the application with Firebase secrets and environment configuration'
inputs:
  # Firebase Configuration Secrets
  firebase-api-key:
    description: 'Firebase API Key'
    required: true
  firebase-auth-domain:
    description: 'Firebase Auth Domain'
    required: true
  firebase-project-id:
    description: 'Firebase Project ID'
    required: true
  firebase-storage-bucket:
    description: 'Firebase Storage Bucket'
    required: true
  firebase-messaging-sender-id:
    description: 'Firebase Messaging Sender ID'
    required: true
  firebase-app-id:
    description: 'Firebase App ID'
    required: true

  # Optional Secrets
  recaptcha-site-key:
    description: 'reCAPTCHA Site Key'
    required: false
    default: ''
  gemini-api-key:
    description: 'Gemini API Key'
    required: false
    default: ''

  # Sentry Configuration (optional)
  sentry-auth-token:
    description: 'Sentry Auth Token for sourcemap upload'
    required: false
    default: ''
  sentry-org:
    description: 'Sentry Organization'
    required: false
    default: 'newrealm'
  sentry-project:
    description: 'Sentry Project'
    required: false
    default: 'javascript-react'

  # Environment
  app-env:
    description: 'App environment (production, staging, preview, local)'
    required: false
    default: 'production'
  base-path:
    description: 'Base path for the application (e.g., /pr-123/)'
    required: false
    default: '/'

outputs:
  build-path:
    description: 'Path to the build output'
    value: './dist'
  version:
    description: 'Application version from package.json'
    value: ${{ steps.get-version.outputs.version }}

runs:
  using: 'composite'
  steps:
    # Extract version from package.json
    - name: Get app version
      id: get-version
      shell: bash
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üì¶ Building version: $VERSION"

    # Build the application
    - name: Build application
      shell: bash
      env:
        # Firebase Configuration
        VITE_FIREBASE_API_KEY: ${{ inputs.firebase-api-key }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ inputs.firebase-auth-domain }}
        VITE_FIREBASE_PROJECT_ID: ${{ inputs.firebase-project-id }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ inputs.firebase-storage-bucket }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ inputs.firebase-messaging-sender-id }}
        VITE_FIREBASE_APP_ID: ${{ inputs.firebase-app-id }}

        # Optional Configuration
        VITE_RECAPTCHA_SITE_KEY: ${{ inputs.recaptcha-site-key }}
        VITE_GEMINI_API_KEY: ${{ inputs.gemini-api-key }}

        # Environment Configuration
        VITE_APP_ENV: ${{ inputs.app-env }}
        VITE_BASE_PATH: ${{ inputs.base-path }}

        # Sentry Configuration
        SENTRY_AUTH_TOKEN: ${{ inputs.sentry-auth-token }}
        SENTRY_ORG: ${{ inputs.sentry-org }}
        SENTRY_PROJECT: ${{ inputs.sentry-project }}
        SENTRY_RELEASE: ${{ github.sha }}
      run: |
        echo "üèóÔ∏è Building application..."
        echo "Environment: $VITE_APP_ENV"
        echo "Base Path: $VITE_BASE_PATH"
        npm run build

    # Verify build output
    - name: Verify build output
      shell: bash
      run: |
        if [ ! -d "dist" ]; then
          echo "‚ùå Build failed: dist directory not found"
          exit 1
        fi

        echo "‚úÖ Build successful"
        echo "üìä Build size:"
        du -sh dist

        echo ""
        echo "üìÅ Build contents:"
        ls -lh dist/
