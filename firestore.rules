rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is owner of the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is in the same group
    function isGroupMember(targetUserId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        exists(/databases/$(database)/documents/users/$(targetUserId)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groupCode ==
        get(/databases/$(database)/documents/users/$(targetUserId)).data.groupCode;
    }

    // Validate user update fields
    function isValidUserUpdate() {
      let validFields = ['nickname', 'gender', 'height', 'weight', 'bodyFat',
                         'maxPushups', 'groupCode', 'pushupState', 'language',
                         'enabledActivities', 'migrated', 'migratedAt',
                         'migratedCount', 'migrationVersion'];
      return request.resource.data.keys().hasAll(['nickname']) &&
             request.resource.data.keys().hasOnly(validFields);
    }

    // Validate tracking data structure
    function isValidTrackingData() {
      let validKeys = ['date', 'pushups', 'sports', 'water', 'protein',
                       'weight', 'completed', 'recovery', 'updatedAt',
                       'tasksCompleted', 'tasksTotal', 'dayProgressPct',
                       'dayStreakMet', 'streakScore'];
      return request.resource.data.keys().hasOnly(validKeys);
    }

    // Validate date format (YYYY-MM-DD)
    function isValidDateFormat(date) {
      return date.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}$');
    }

    // Validate tracking entry
    function isValidTrackingEntry() {
      return isValidTrackingData() &&
             request.resource.data.date == resource.id;
    }

    // Validate week ID format (YYYY-WXX)
    function isValidWeekId(weekId) {
      return weekId.matches('^[0-9]{4}-W[0-9]{2}$');
    }

    // Users collection - users can read own data and limited fields from group members
    match /users/{userId} {
      // Users can read their own full profile
      allow read: if isOwner(userId);
      // Users can read limited fields from group members
      allow read: if isAuthenticated() && isGroupMember(userId);
      // Users can only write their own data with field validation
      allow write: if isOwner(userId) && isValidUserUpdate();

      // Allow owner to access ALL subcollections under their user document
      match /{document=**} {
        allow read, write: if isOwner(userId);
      }
    }

    // Tracking collection - STRICT: users can ONLY read/write their OWN data
    match /tracking/{userId}/{document=**} {
      // CRITICAL FIX: Only owner can read their own tracking data
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && isValidTrackingData();
    }

    // Tracking entries subcollection - STRICT owner-only access
    match /tracking/{userId}/entries/{date} {
      // CRITICAL FIX: Only owner can read their own entries
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && isValidDateFormat(date) && isValidTrackingEntry();
    }

    // Tracking weeks subcollection - STRICT owner-only access
    match /tracking/{userId}/weeks/{weekId} {
      // CRITICAL FIX: Only owner can read their own weekly data
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && isValidWeekId(weekId);
    }

    // Groups collection - authenticated users can read all groups
    // Users can create groups and update if they're adding themselves to members
    match /groups/{groupCode} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.members ||
        request.auth.uid in request.resource.data.members
      );
      allow delete: if false; // Groups cannot be deleted
    }

    // Weekly Top 3 collection - authenticated users can read, only system can write
    match /weeklyTop3/{snapshotId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated(); // Allow authenticated users to write (for the weekly snapshot feature)
    }

    // Notes collection - users can only read/write their own notes
    match /notes/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }

    // AI Quotes collection - users can only read/write their own AI-generated quotes
    match /aiQuotes/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
  }
}
